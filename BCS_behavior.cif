import "BCS_FM_dynamic.cif";

// ECU HMI

// HMI LED Exterior Mirror
plant automaton LED_EM_top:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_EM_left:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_EM_bottom:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_EM_right:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton PRESENCE_CHECK_HMI_LED_EM:
location Dummy: initial; marked;
        edge LED_EM_top.c_off when FLEDMir.present;
        edge LED_EM_top.c_on when FLEDMir.present;
        edge LED_EM_left.c_off when FLEDMir.present;
        edge LED_EM_left.c_on when FLEDMir.present;
        edge LED_EM_bottom.c_off when FLEDMir.present;
        edge LED_EM_bottom.c_on when FLEDMir.present;
        edge LED_EM_right.c_off when FLEDMir.present;
        edge LED_EM_right.c_on when FLEDMir.present;
end

requirement LED_EM_top.c_on needs positionEM.EM_top or positionEM.EM_top_left or positionEM.EM_top_right;
requirement LED_EM_top.c_off needs positionEM.EM_hor_pending or positionEM.EM_hor_left or positionEM.EM_hor_right;

requirement LED_EM_left.c_on needs positionEM.EM_hor_left or positionEM.EM_top_left or positionEM.EM_bottom_left;
requirement LED_EM_left.c_off needs positionEM.EM_hor_pending or positionEM.EM_bottom or positionEM.EM_top;

requirement LED_EM_bottom.c_on needs positionEM.EM_bottom or positionEM.EM_bottom_left or positionEM.EM_bottom_right;
requirement LED_EM_bottom.c_off needs positionEM.EM_hor_pending or positionEM.EM_hor_left or positionEM.EM_hor_right;

requirement LED_EM_right.c_on needs positionEM.EM_hor_right or positionEM.EM_top_right or positionEM.EM_bottom_right;
requirement LED_EM_right.c_off needs positionEM.EM_hor_pending or positionEM.EM_bottom or positionEM.EM_top;


// LED Finger Protection

plant automaton LED_PW_FP:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton PRESENCE_CONTROLLED_LED_FP:
location Dummy: initial; marked;
    edge LED_PW_FP.c_on when FLEDFP.present;
    edge LED_PW_FP.c_off when FLEDFP.present;
end

requirement LED_PW_up.c_on needs fingerPW.On;
requirement LED_PW_up.c_off needs fingerPW.Off;

// LED Power Window

plant automaton LED_PW_up:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_PW_dn:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton PRESENCE_CONTROLLED_PW_DN_UP:
location Dummy: initial; marked;
    edge LED_PW_up.c_on when FLEDPW.present;
    edge LED_PW_up.c_off when FLEDPW.present;
    edge LED_PW_dn.c_on when FLEDPW.present;
    edge LED_PW_dn.c_off when FLEDPW.present;
end

requirement LED_PW_up.c_on needs motorPW.Up;
requirement LED_PW_up.c_off needs motorPW.Idle;
requirement LED_PW_dn.c_on needs motorPW.Down;
requirement LED_PW_dn.c_off needs motorPW.Idle;

// LED Exterior Mirror Heating
plant automaton LED_EM_heating:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton PRESENCE_CONTROLLED_EM_HEAT:
location Dummy: initial; marked;
    edge LED_EM_heating.c_on when FLEDHeat.present;
    edge LED_EM_heating.c_off when FLEDHeat.present;
end

requirement LED_EM_heating.c_on needs EM_heating.On;
requirement LED_EM_heating.c_off needs EM_heating.Off;

// LED Central locking
plant automaton LED_CLS:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton PRESENCE_CONTROLLED_LED_CLS:
location Dummy: initial; marked;
    edge LED_CLS.c_on when FLEDCLS.present;
    edge LED_CLS.c_off when FLEDCLS.present;
end

requirement LED_CLS.c_on needs CLS.Locked;
requirement LED_CLS.c_off needs CLS.Unlocked;

// LED Alarm System

plant automaton LED_AS_active:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_AS_alarm:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_AS_alarm_det:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_AS_IM:
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton PRESENCE_CONTROLLED_LED_AS:
location Dummy: initial; marked;
    edge LED_AS_active.c_on when FLEDAlarm.present;
    edge LED_AS_active.c_off when FLEDAlarm.present;
    edge LED_AS_alarm.c_on when FLEDAlarm.present;
    edge LED_AS_alarm.c_off when FLEDAlarm.present;
    edge LED_AS_alarm_det.c_on when FLEDAlarm.present;
    edge LED_AS_alarm_det.c_off when FLEDAlarm.present;
    edge LED_AS_IM.c_on when FLEDAlarm.present;
    edge LED_AS_IM.c_off when FLEDAlarm.present;
end

requirement LED_AS_active.c_on needs AlarmSystem.Activated;
requirement LED_AS_active.c_off needs AlarmSystem.Deactivated;

requirement LED_AS_alarm.c_on needs AlarmSystem.On;
requirement LED_AS_alarm.c_off needs AlarmSystem.Activated;

requirement LED_AS_alarm_det.c_on needs AlarmSystem.Alarm_detected;
requirement LED_AS_alarm_det.c_off needs AlarmSystem.On;

requirement LED_AS_IM.c_on needs InteriorMonitoring.On;
requirement LED_AS_IM.c_off needs InteriorMonitoring.Off;

// ECU Door system

//Power Window

plant automaton buttonPW:
    uncontrollable u_up, u_down, u_released;
    location Idle:
        initial; marked;
        edge u_up goto Up;
        edge u_down goto Down;
    location Down:
        edge u_released goto Idle;
        edge u_up goto Up;
    location Up:
        edge u_released goto Idle;
        edge u_down goto Down;
end

plant automaton sensorPW:
    uncontrollable u_up, u_down, u_inBetween;
    location InBetween:
        edge u_up goto Up;
        edge u_down goto Down;
    location Up:
        initial; marked;
        edge u_inBetween goto InBetween;
    location Down:
        edge u_inBetween goto InBetween;
end

plant automaton fingerPW:
    uncontrollable u_fingerDetected;
    controllable c_fingerReleased;
    location Off:
    initial;marked;
    edge u_fingerDetected goto On;
    location On:
    edge c_fingerReleased goto Off;
end

plant automaton motorPW:
    controllable c_up, c_down, c_off_dn, c_off_up;
    location Idle:
        initial;marked;
        edge c_up goto Up;
        edge c_down goto Down;
    location Up:
        edge c_up;
        edge c_off_up goto Idle;
        edge CLS.c_lock goto Up_CLS;
    location Up_CLS:
        edge CLS.c_unlock goto Up;
    location Down:
        edge c_off_dn goto Idle;
        edge c_down;
        edge CLS.c_lock goto Down_CLS;
    location Down_CLS:
        edge CLS.c_unlock goto Down;
end

plant automaton PRESENCE_UNCONTROLLED_PW:
location Dummy: initial; marked;
    edge buttonPW.u_up when FPowerW.present;
    edge buttonPW.u_down when FPowerW.present;
    edge buttonPW.u_released when FPowerW.present;
    edge sensorPW.u_up when FPowerW.present;
    edge sensorPW.u_down when FPowerW.present;
    edge sensorPW.u_inBetween when FPowerW.present;
    edge fingerPW.u_fingerDetected when FFingerP.present;
end

plant automaton PRESENCE_CONTROLLED_PW:
location Dummy: initial; marked;
    edge fingerPW.c_fingerReleased when FFingerP.present;
    edge motorPW.c_up when FPowerW.present;
    edge motorPW.c_down when FPowerW.present;
    edge motorPW.c_off_dn when FPowerW.present;
    edge motorPW.c_off_up when FPowerW.present;
end

// Requirements
requirement motorPW.c_up needs buttonPW.Up or RCK_PW.Up;
requirement motorPW.c_up needs fingerPW.Off;
requirement motorPW.c_up needs not sensorPW.Up;

requirement motorPW.c_down needs buttonPW.Down  or RCK_PW.Down;
requirement motorPW.c_down needs fingerPW.Off;
requirement motorPW.c_down needs not sensorPW.Down;

requirement motorPW.c_off_dn needs fingerPW.On or (FManPW.present => buttonPW.Idle) or sensorPW.Down or (FAutoPW.present => (buttonPW.Up or RCK_PW.Up));

requirement motorPW.c_off_up needs fingerPW.On or (FManPW.present => buttonPW.Idle) or sensorPW.Up or (FAutoPW.present => (buttonPW.Down or RCK_PW.Down));

requirement fingerPW.c_fingerReleased needs buttonPW.Down;

// Exterior Mirror

plant automaton buttonEM:
    uncontrollable u_up, u_down, u_left, u_right, u_released;
    location Idle:marked;initial;
        edge u_up goto Up;
        edge u_down goto Down;
        edge u_left goto Left;
        edge u_right goto Right;
    location Up:
        edge u_released goto Idle;
    location Down:
        edge u_released goto Idle;
    location Left:
        edge u_released goto Idle;
    location Right:
        edge u_released goto Idle;
end

plant automaton positionEM:
    uncontrollable u_pos_top, u_pos_down, u_pos_left, u_pos_right;
    uncontrollable u_rel_top, u_rel_down, u_rel_left, u_rel_right;
    location EM_hor_pending:
        initial;marked;
        edge u_pos_top goto EM_top;
        edge u_pos_down goto EM_bottom;
        edge u_pos_left goto EM_hor_left;
        edge u_pos_right goto EM_hor_right;
    location EM_top:
        edge u_pos_left goto EM_top_left;
        edge u_pos_right goto EM_top_right;
        edge u_rel_top goto EM_hor_pending;
    location EM_top_left:
        edge u_rel_top goto EM_hor_left;
        edge u_rel_left goto EM_top;
    location EM_top_right:
        edge u_rel_top goto EM_hor_right;
        edge u_rel_right goto EM_top;
    location EM_bottom:
        edge u_rel_down goto EM_hor_pending;
        edge u_pos_left goto EM_bottom_left;
        edge u_pos_right goto EM_bottom_right;
    location EM_bottom_left:
        edge u_rel_down goto EM_hor_left;
        edge u_rel_left goto EM_bottom;
    location EM_bottom_right:
        edge u_rel_down goto EM_hor_right;
        edge u_rel_right goto EM_bottom;
    location EM_hor_left:
        edge u_rel_left goto EM_hor_pending;
    location EM_hor_right:
        edge u_rel_right goto EM_hor_pending;
end

plant automaton motorEM:
    controllable c_left, c_right, c_up, c_down, c_off;
    location Idle:initial; marked;
        edge c_left goto Left;
        edge c_right goto Right;
        edge c_up goto Up;
        edge c_down goto Down;
    location Left:
        edge c_off goto Idle;
    location Right:
        edge c_off goto Idle;
    location Up:
        edge c_off goto Idle;
    location Down:
        edge c_off goto Idle;
end

plant automaton PRESENCE_UNCONTROLLED_EM:
location Dummy: initial; marked;
    edge buttonEM.u_up when FMir.present;
    edge buttonEM.u_down when FMir.present;
    edge buttonEM.u_left when FMir.present;
    edge buttonEM.u_right when FMir.present;
    edge positionEM.u_pos_top when FMir.present;
    edge positionEM.u_pos_down when FMir.present;
    edge positionEM.u_pos_left when FMir.present;
    edge positionEM.u_pos_right when FMir.present;
    edge positionEM.u_rel_top when FMir.present;
    edge positionEM.u_rel_down when FMir.present;
    edge positionEM.u_rel_left when FMir.present;
    edge positionEM.u_rel_right when FMir.present;
end

plant automaton PRESENCE_CONTROLLED_EM:
location Dummy: initial; marked;
    edge motorEM.c_up when FMir.present;
    edge motorEM.c_down when FMir.present;
    edge motorEM.c_left when FMir.present;
    edge motorEM.c_right when FMir.present;
    edge motorEM.c_off when FMir.present;
end

requirement motorEM.c_left needs not(positionEM.EM_hor_left or positionEM.EM_top_left or positionEM.EM_bottom_left);
requirement motorEM.c_right needs not(positionEM.EM_hor_right or positionEM.EM_top_right or positionEM.EM_bottom_right);
requirement motorEM.c_up needs not(positionEM.EM_top or positionEM.EM_top_right or positionEM.EM_top_left);
requirement motorEM.c_down needs not(positionEM.EM_bottom or positionEM.EM_bottom_right or positionEM.EM_bottom_left);

requirement motorEM.c_left needs buttonEM.Left or RCK_EM.Left;
requirement motorEM.c_right needs buttonEM.Right or RCK_EM.Right;
requirement motorEM.c_up needs buttonEM.Up or RCK_EM.Up;
requirement motorEM.c_down needs buttonEM.Down or RCK_EM.Down;
requirement motorEM.c_off needs buttonEM.Idle or RCK_EM.Idle;

// Electric mirror heating
plant automaton EM_temp_time:
    uncontrollable u_lowtemp, u_done;
    location Heating_off:initial;marked;
        edge u_lowtemp goto Heating_on;//Temp too low
    location Heating_on:
        edge u_done goto Heating_off;//Time elapsed
end

plant automaton EM_heating:
    controllable c_on, c_off;
    location Off:initial;marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton PRESENCE_UNCONTROLLED_MIRHEAT:
location Dummy: initial; marked;
    edge EM_temp_time.u_lowtemp when FMirHeat.present;
    edge EM_temp_time.u_done when FMirHeat.present;
end

plant automaton PRESENCE_CONTROLLED_MIRHEAT:
location Dummy: initial; marked;
    edge EM_heating.c_on when FMirHeat.present;
    edge EM_heating.c_off when FMirHeat.present;
end

requirement EM_heating.c_on needs EM_temp_time.Heating_on;
requirement EM_heating.c_on needs EM_temp_time.Heating_off;

// ECU Alarm System

plant automaton AlarmSystem:
    controllable c_on, c_off,c_deactivated, c_activated, c_IM_detected;
    uncontrollable u_detected, u_time_elapsed;
    location Deactivated:
        edge c_activated goto Activated;
    location Activated:
        initial;marked;
        edge c_on goto On;
        edge c_deactivated goto Deactivated;
    location On:
        edge c_off goto Activated;
        edge u_detected goto Alarm_detected;
        edge c_IM_detected goto Alarm_detected;
    location Alarm_detected:
        edge c_off goto Activated;
        edge u_time_elapsed goto On;
end

plant automaton InteriorMonitoring:
    uncontrollable u_detected, u_clear;
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
        edge u_detected goto Detected;
    location Detected:
        edge u_clear goto On;
        edge c_off goto Off;
end

plant automaton PRESENCE_UNCONTROLLED_AS:
location Dummy: initial; marked;
    edge AlarmSystem.u_detected when FAlarm.present;
    edge AlarmSystem.u_time_elapsed when FAlarm.present;
    edge InteriorMonitoring.u_detected when FInterMon.present;
    edge InteriorMonitoring.u_clear when FInterMon.present;
end

plant automaton PRESENCE_CONTROLLED_AS:
location Dummy: initial; marked;
    edge AlarmSystem.c_on when FAlarm.present;
    edge AlarmSystem.c_off when FAlarm.present;
    edge AlarmSystem.c_deactivated when FAlarm.present;
    edge AlarmSystem.c_IM_detected when FInterMon.present;
    edge InteriorMonitoring.c_on when FInterMon.present;
    edge InteriorMonitoring.c_off when FInterMon.present;
end

requirement AlarmSystem.c_on needs Key_lock.Locked or RCK_CLS.Locked;
requirement AlarmSystem.c_off needs Key_lock.Unlocked or RCK_CLS.Unlocked;
requirement AlarmSystem.c_deactivated needs Key_lock.Unlocked or RCK_CLS.Unlocked;

requirement AlarmSystem.c_IM_detected needs InteriorMonitoring.Detected;
requirement InteriorMonitoring.c_off needs Key_lock.Unlocked or RCK_CLS.Unlocked;

// ECU Central Locking System (CLS)

plant automaton Key_lock:
    uncontrollable u_lock, u_unlock;
    location Unlocked:
    initial;marked;
        edge u_lock goto Locked;
    location Locked:
        edge u_unlock goto Unlocked;
end

plant automaton CLS:
    controllable c_lock, c_unlock;
    location Unlocked:
    initial;marked;
        edge c_lock goto Locked;
    location Locked:
    initial;marked;
        edge c_unlock goto Unlocked;
end

plant automaton Auto_lock:
    uncontrollable u_drive_lock, u_door_open_unlock;
    location Unlocked:
    initial;marked;
        edge u_drive_lock goto Locked; //When car starts driving
    location Locked:
    initial;marked;
        edge u_door_open_unlock goto Unlocked;
end

plant automaton PRESENCE_UNCONTROLLED_CLS:
location Dummy: initial; marked;
    edge Key_lock.u_lock when FCLS.present;
    edge Key_lock.u_unlock when FCLS.present;
    edge Auto_lock.u_drive_lock when FAutoL.present;
    edge Auto_lock.u_door_open_unlock when FAutoL.present;
end

plant automaton PRESENCE_CONTROLLED_CLS:
location Dummy: initial; marked;
    edge CLS.c_lock when FCLS.present;
    edge CLS.c_unlock when FCLS.present;
end

requirement CLS.c_lock needs Key_lock.Locked or RCK_CLS.Locked or Auto_lock.Locked;
requirement CLS.c_unlock needs Key_lock.Unlocked or RCK_CLS.Unlocked;

//RCK Modelling

plant automaton RCK_CLS:
    uncontrollable u_lock, u_unlock;
    location Unlocked:
    initial;marked;
        edge u_lock goto Locked;
    location Locked:
    initial;marked;
        edge u_unlock goto Unlocked;
end

plant automaton Safety_fcn:
    uncontrollable u_time_elapsed_lock, u_door_open;
    controllable c_locked, c_unlock;
    location Idle:
    initial;marked;
        edge c_unlock goto Unlocked_RCK;
    location Unlocked_RCK:
    marked;
        edge u_time_elapsed_lock goto AutoLocking;// When t>timeout
        edge u_door_open goto Idle; // When t<timeout
    location AutoLocking:
        edge CLS.c_lock goto Idle;
end

plant automaton RCK_PW:
    uncontrollable u_up, u_down, u_released;
    location Idle:
    initial;marked;
        edge u_up goto Up;
        edge u_down goto Down;
    location Up:
        edge u_released goto Idle;
    location Down:
        edge u_released goto Idle;
end

plant automaton RCK_EM:
    uncontrollable u_up, u_down, u_left, u_right, u_released;
    location Idle:marked;initial;
        edge u_up goto Up;
        edge u_down goto Down;
        edge u_left goto Left;
        edge u_right goto Right;
    location Up:
        edge u_released goto Idle;
    location Down:
        edge u_released goto Idle;
    location Left:
        edge u_released goto Idle;
    location Right:
        edge u_released goto Idle;
end

plant automaton PRESENCE_UNCONTROLLED_SAFETY_RCK:
location Dummy: initial; marked;
    edge Safety_fcn.u_time_elapsed_lock when FSafe.present;
    edge Safety_fcn.u_door_open when FSafe.present;
    edge RCK_CLS.u_lock when FCLS.present;
    edge RCK_CLS.u_unlock when FCLS.present;
    edge RCK_PW.u_up when FCtrAutoPW.present;
    edge RCK_PW.u_down when FCtrAutoPW.present;
    edge RCK_PW.u_released when FCtrAutoPW.present;
    edge RCK_EM.u_up when FAdjMir.present;
    edge RCK_EM.u_down when FAdjMir.present;
    edge RCK_EM.u_left when FAdjMir.present;
    edge RCK_EM.u_right when FAdjMir.present;
    edge RCK_EM.u_released when FAdjMir.present;
end

plant automaton PRESENCE_CONTROLLED_SAFETY_RCK:
location Dummy: initial; marked;
    edge Safety_fcn.c_unlock when FSafe.present;
    edge Safety_fcn.c_locked when FSafe.present;
end

requirement Safety_fcn.c_unlock needs RCK_CLS.Unlocked;
